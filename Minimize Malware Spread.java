import java.util.*;

public class Main {
    static int minMalwareSpread(int[][] graph, int[] initial) {
        Arrays.sort(initial);
        int n = graph.length;
        int minInfected = Integer.MAX_VALUE;
        int result = initial[0];
        
        for (int node : initial) {
            boolean[] infected = new boolean[n];
            for (int i : initial) {
                if (i != node) {
                    spreadInfection(graph, infected, i);
                }
            }
            int infectedCount = countInfected(infected);
            if (infectedCount < minInfected) {
                minInfected = infectedCount;
                result = node;
            }
        }
        
        return result;
    }
    
    private static void spreadInfection(int[][] graph, boolean[] infected, int start) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(start);
        while (!queue.isEmpty()) {
            int node = queue.poll();
            if (!infected[node]) {
                infected[node] = true;
                for (int i = 0; i < graph.length; i++) {
                    if (graph[node][i] == 1 && !infected[i]) {
                        queue.add(i);
                    }
                }
            }
        }
    }
    
    private static int countInfected(boolean[] infected) {
        int count = 0;
        for (boolean b : infected) {
            if (b) {
                count++;
            }
        }
        return count;
    }

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        int n = input.nextInt();
        int m = input.nextInt();
        int[][] net = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                net[i][j] = input.nextInt();
            }
        }
        int[] initial = new int[m];
        for (int i = 0; i < m; i++) {
            initial[i] = input.nextInt();
        }
        System.out.print(minMalwareSpread(net, initial));
        input.close();
    }
}
